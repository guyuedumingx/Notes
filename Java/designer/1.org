* 单一职责原则
** 定义
*** There should never be more than one reason for a class to change
***** 应该有且只有一个原因引起类的变更
** 在设计接口时要做到职责单一
** 类的设计尽量做到只有一个原因引起变化
*** 对于实现类可以进行多方面的考虑
*** 因为如果在类的层次上考虑单一职责，可能会造成类数量剧增
** 对于方法的职责也尽量单一
* 里氏替换原则
** 定义
*** Functions that use pointers to base classes must be able to use objects of derived classes without knowing it.
**** 所有引用基类的地方必须能透明的使用其子类对象
**** 通俗解释：只要父类能出现的地方子类就可以出现，而且替换为子类也不会产生任何错误或异常
* 依赖倒置原则
** 定义
   1. High level modules should not depend upon low level modules. Both should depend upon abstractions.
      - 高层模块不应该以来低层模块，两者应该都依赖其抽象
   2. Abstractions should not depend upon details.
      - 抽象不应该依赖细节
   3. Details should depend upon abstractions
      - 细节应该依赖抽象
** 理解
      每一个逻辑的实现都是由原子逻辑组成的，不可分割的原子逻辑就是低层模块，原子逻
   辑再组装就是高层模块。
      抽象就是指接口或者抽象类，两者都是不能直接被实例化的
      细节就是实现类，实现接口或继承抽象类而产生的类就是细节，可被实例化
** 表现
   1. 模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，其依赖关系是通过
      接口或抽象类产生的
   2. 接口或抽象类不依赖抽象类
   3. 实现类依赖接口或抽象类
** 依赖注入
*** 构造函数传递依赖对象
    #+begin_src java
      public interface IDriver {
        public void drive();
      }

      public class Driver implements IDriver {
        private ICar car;

        //构造函数注入依赖
        public Driver(ICar car) {
          this.car = car;
        }
      }
    #+end_src
*** Setter方法传递依赖对象
    #+begin_src java
      public interface IDriver {
        public void drive();
      }

      public class Driver implements IDriver {
        private ICar car;

        //Setter方法传递依赖对象
        public void setCar(ICar car) {
          this.car = car;
        }
      }
    #+end_src
*** 接口声明依赖对象
    #+begin_src java
      public interface IDriver {
        public void drive(ICar car);
      }
    #+end_src
** 实践经验
   1. 每个类尽量都有接口或者抽象类，或者两者兼备
      - 工具类除外
      - clone方法必须使用实现类
   2. 任何类都不应该从具体类派生
   3. 尽量不要覆写基类的方法
      - 有可能影响依赖的稳定性
*** 接口负责定义public属性和方法，并且声明与其他对象的依赖关系
*** 抽象类负责公共构造部分的实现
*** 实现类准确的实现业务逻辑，同时适当的时候对父类进行细化
* 接口隔离原则
** 实例接口
   #+begin_src java
    Person zhangSan = new Person();
   #+end_src 
   其中Person就是一个接口
   Java中的类也是一种接口
** 类接口
   Java中使用interface关键字定义的接口
** 隔离的定义
*** Clients should not be forced to depend upon interface that they don't use
    - 客户端不应该依赖它不需要的接口
*** The dependency of one class to another one should depend on the smallest possible interface
    - 类间的依赖关系应该建立在最小的接口之上
*** 接口尽量细化，同时接口中的方法尽量少(单一接口)
    - 尽量提供多个专门的接口
    - 就是指提供给每个模块的都应该是单一接口，提供给几个模块的就应该有几个接口，
      而不是建立一个庞大的臃肿的接口，容纳所有的客户端访问
** 接口规范
*** 接口要尽量小
*** 接口要高内聚
    - 在接口中尽量少公布public方法
*** 定制服务
    - 为各个类型的访问者(即客户端)定制服务
*** 接口设计是有限度的
** 实践经验
   1. 一个接口只服务于一个子模块或业务逻辑
   2. 通过业务逻辑压缩接口中的public方法
   3. 已经被污染的接口，尽量去修改，若变更风险较大，则采用适配器模式进行转化处理
*** 接口和类尽量使用原子接口和原子类来组装
* 迪米特法则
** 最少知识原则
** 定义
*** 一个对象应该对其他对象有最少的了解
*** Only talk to your immedate friends
    - 只与直接的朋友通信
    - 朋友类
      - 出现在成员变量、方法的输入输出参数中的类称为成员朋友类
*** 通俗解释
    一个类应该对自己需要耦合或调用的类知道得最少,被耦合或调用的类的内部是如何
    实现的都和我没关系，我就知道你提供了的public方法，我就调用这么多,其他的我
    一概不关心
** 实际经验
*** 如果方法放在本类可以，放在其他类也没错
**** 原则： 如果一个方法放在本类中，既不增加类间关系，也不对本类产生负面影响，就放置在本类中
* 开闭原则
** 定义
*** Softwave entities like classes, modules and functions should be open for extension but closed for modifications.
    - 一个软件实体如类、模块和函数应该对拓展开放、对修改关闭
*** 软实体
**** 项目或软件产品中按照一定的逻辑规则划分的模块
**** 抽象和类
**** 方法
** 例子
   #+begin_src java
     public interface IBook {
       public String getName();
       public int getPrice();
       public String getAuthor();
     }

     public class NovelBook implements IBook {
       private String name;
       private int price;
       private String author;

       public NovelBook(String name, int price, String author) {
         this.name = name;
         this.price = price;
         this.author = author;
       }

       public String getPrice() {
          return this.price;
       }
     }

     public class BookStore {
        private final static ArrayList<IBook> bookList = new ArrayList<IBook>();

        static {
           bookList.add(new NovelBook("天龙八部",3200,"金庸"));
           bookList.add(new NovelBook("巴黎圣母院",5600,"雨果"));
           bookList.add(new NovelBook("悲惨世界",3500,"雨果"));
           bookList.add(new NovelBook("金瓶梅",4300,"蓝陵笑笑生"));
        }
     }
   #+end_src 
   新需求：所有40元以上的书籍9折出售，其他的8折出售
   解决方式：
     - 修改接口
     - 修改实现类
       - 直接在getPrice()中实现打折处理
     - 通过拓展实现变化 
   #+begin_src java
     public interface IBook {
       public String getName();
       public int getPrice();
       public String getAuthor();
     }

     public class NovelBook implements IBook {
       private String name;
       private int price;
       private String author;

       public NovelBook(String name, int price, String author) {
         this.name = name;
         this.price = price;
         this.author = author;
       }

       public String getPrice() {
          return this.price;
       }
     }

     //拓展开放
     public class OffNovelBook extends NovelBook {
       public OffNovelBook(String name, int price, String author) {
         super(name, price, author);
       }

       @Override
       public int getPrice() {
         int selfPrice = super.getPrice();
         int offPrice = 0;

         if(selfPrice > 4000) {
            offPrice = selfPrice * 90 / 100;
         } else {
            offPrice = selfPrice * 80 /100;
         }

         return offPrice;
       }
     }


     public class BookStore {
        private final static ArrayList<IBook> bookList = new ArrayList<IBook>();

        static {
           bookList.add(new OffNovelBook("天龙八部",3200,"金庸"));
           bookList.add(new OffNovelBook("巴黎圣母院",5600,"雨果"));
           bookList.add(new OffNovelBook("悲惨世界",3500,"雨果"));
           bookList.add(new OffNovelBook("金瓶梅",4300,"蓝陵笑笑生"));
        }
     }
   #+end_src 
